service: ServerlessStepPlugin

frameworkVersion: ">=1.13.0 <2.0.0"

plugins:
   - serverless-step-functions
   - serverless-step-functions-offline


provider:
  name: aws
  runtime: nodejs8.10
  cfLogs: true
  region: eu-west-1
  memorySize: 128
  timeout: 3

custom:
  stepFunctionsOffline:
      FirstLambda: firstLambda
      AsyncLambda: asyncLambda
      AsyncLambda1: asyncLambda
      AsyncLambda2: asyncLambda
      SecondAsyncLambda: secondAsyncLambda

functions:
    firstLambda:
        handler: examples/firstLambda/index.handler
        name: TheFirstLambda
    asyncLambda:
        handler: examples/asyncLambda/index.handler
        name: AsyncLambda
    secondAsyncLambda:
        handler: examples/secondAsyncLambda/index.handler
        name: SecondAsyncLambda

stepFunctions:
  stateMachines:
    foo:
      definition:
        Comment: "An example of the Amazon States Language using wait states"
        StartAt: FirstLambda
        States:
            FirstLambda:
              Type: Task
              Next: AsyncLambda
            AsyncLambda:
              Type: Task
              Next: wait_using_seconds
            # SecondAsyncLambda:
            #   Type: Task
            #   Next: wait_using_seconds
            wait_using_seconds:
              Type: Wait
              Seconds: 2
              Next: wait_using_timestamp
            wait_using_timestamp:
              Type: Wait
              Timestamp: '2015-09-04T01:59:00Z'
              Next: wait_using_timestamp_path
            wait_using_timestamp_path:
              Type: Wait
              TimestampPath: "$.expirydate"
              Next: wait_using_seconds_path
            wait_using_seconds_path:
              Type: Wait
              SecondsPath: "$.expiryseconds"
              Next: FinalState
            FinalState:
              Type: Pass
              Next: Done
            Done:
              Type: Succeed
    bar: 
        definition:
          StartAt: FirstState
          States:
            FirstState:
              Type: Pass
              Next: FirstLambda
            FirstLambda:
              Type: Task
              Next: Parallel
            Parallel:
              Type: Parallel
              ResultPath: $.results
              Next: Continue
              Branches:
                - StartAt: AsyncLambda1
                  States:
                    AsyncLambda1:
                      Type: Task
                      Done: true
                - StartAt: AsyncLambda2
                  States:
                    AsyncLambda2:
                      Type: Task
                      Done: true
            Continue:
              Type: Choice
              Choices:
              - Variable: "$.expiryseconds"
                NumericGreaterThan: 2
                Next: SecondAsyncLambda
              - Variable: "$.expiryseconds"
                NumericLessThanEquals: 2
                Next: AsyncLambda
              Default: AsyncLambda
            AsyncLambda:
              Type: Task
              Done: true
            SecondAsyncLambda:
              Type: Task
              Done: true

